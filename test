"""
Main orchestrator for the BAI2 to TXT pipeline (local testing).
"""

import os
import io
import logging
import sys
import argparse
from bai_parser import parse_from_file
from bai_pipeline import settings, config_loader, transformer, validator

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    stream=sys.stdout
)
logger = logging.getLogger(__name__)


def _get_identifiers_from_filename(filename: str) -> tuple[str, str]:
    """Extract bank_id and customer_id from a filename like 'BANK_CUSTOMER.bai'."""
    base = os.path.basename(filename).split(".")[0]
    parts = base.split("_")
    if len(parts) < 2:
        raise ValueError(f"Filename '{filename}' does not match 'BANKID_CUSTOMERID' format.")
    return parts[0], parts[1]


def run_local(input_file: str, output_file: str):
    """Runs the pipeline locally: reads BAI2 from local, writes results to a TXT file."""
    logger.info(f"--- Starting local BAI2 pipeline for file: {input_file} ---")
    try:
        # 1. Load config
        config = config_loader.load_config(settings.MAPPING_CONFIG_PATH)
        bank_id, customer_id = _get_identifiers_from_filename(input_file)
        logger.info(f"Identified Bank ID: '{bank_id}', Customer ID: '{customer_id}'")

        # 2. Read file locally
        with open(input_file, "r", encoding="utf-8") as f:
            bai_text = f.read()

        # 3. Parse
        bai_file = parse_from_file(io.StringIO(bai_text), check_integrity=True)

        # 4. Transform
        bank_mappings = config_loader.get_bank_mappings(config, bank_id)
        transformed_rows = transformer.transform_bai_to_rows(
            bai_file, customer_id, config, bank_mappings
        )
        if not transformed_rows:
            logger.warning("Transformation produced zero rows. Nothing to write.")
            return

        # 5. Validate
        validator.validate_rows(transformed_rows, config)

        # 6. Write to TXT
        logger.info(f"Writing {len(transformed_rows)} rows to {output_file}")
        with open(output_file, "w", encoding="utf-8") as f:
            for row in transformed_rows:
                f.write(str(row) + "\n")

        logger.info("--- Local BAI2 pipeline completed successfully. ---")

    except Exception as e:
        logger.error(f"--- Pipeline failed: {e} ---", exc_info=True)
        raise


def run_cli():
    """Run from CLI for local testing."""
    parser = argparse.ArgumentParser(description="Run the BAI2 to TXT pipeline locally.")
    parser.add_argument("input_file", type=str, help="Path to local BAI2 input file.")
    parser.add_argument("output_file", type=str, help="Path to local TXT output file.")
    args = parser.parse_args()
    try:
        run_local(args.input_file, args.output_file)
    except Exception:
        sys.exit(1)


if __name__ == "__main__":
    run_cli()
